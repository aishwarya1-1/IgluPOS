// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum AddonCategory {
  Topping
  Cone
}

enum DiscountType {
  FLAT
  PERCENTAGE
}

model Category {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  iceCreams IceCream[]  @relation("IceCreamCategory")
}

model Discount {
  id         Int          @id @default(autoincrement())
  type       DiscountType  // FLAT or PERCENTAGE
  value      Float        // Discount value (fixed amount or percentage)

  orders     Order[]      // Orders using this discount

  @@unique([type, value]) // Prevents duplicate discounts
}

model Coupon {
  id            Int           @id @default(autoincrement())
  code          String        @unique  // Unique coupon code
  type       DiscountType
  value         Float         // Value of coupon (fixed or percentage)
  maxUsage      Int?          // Optional: Limit the number of times it can be used
  expiryDate    DateTime?     // Optional expiry date
  orders        Order[]       // Orders using this coupon
  loginId    Int          // Ensure each login has its own ice creams
  login      Login        @relation(fields: [loginId], references: [id])
}

model IceCream {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  categoryId Int
  cost       Float
  loginId    Int          // Ensure each login has its own ice creams
  login      Login        @relation(fields: [loginId], references: [id])
  
  category    Category    @relation("IceCreamCategory", fields: [categoryId], references: [id])
  orderItems  OrderItems[]
  @@unique([name, categoryId, cost, loginId]) 
}




enum ModeOfPayment {
  Cash
  Card
  UPI
  PartPay
}

enum OrderType {
  DineIn
  TakeAway
  Delivery
}

enum OrderStatus {
  SUCCESS
  CANCELLED
}

model Order {
  id            Int           @id @default(autoincrement())
  userOrderId   Int
  orderDate     DateTime      @default(now())
  modeOfPayment ModeOfPayment
  paymentDetails Json?
  orderType     OrderType
  totalCost     Float         @default(0.0)
  userId        Int
  status        OrderStatus   @default(SUCCESS)
  billerName    String
  discountId    Int?          // Foreign key to Discount
  couponId      Int?          // Foreign key to Coupon
  // Relation field
  user          Login         @relation(fields: [userId], references: [id])
  orderItems    OrderItems[]
  discount      Discount?     @relation(fields: [discountId], references: [id])
  coupon        Coupon?       @relation(fields: [couponId], references: [id])

}

model OrderItems {
  id          Int             @id @default(autoincrement())
  quantity    Int            @default(1)
  itemCost    Float
  orderId     Int
  iceCreamId  Int
  // Relations
  order       Order          @relation(fields: [orderId], references: [id])
  iceCream    IceCream       @relation(fields: [iceCreamId], references: [id])
  addons      OrderItemAddon[]

  @@unique([orderId, iceCreamId])
}
model Employee {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  password   String   @db.VarChar(255) // Store hashed password
  phoneNumber String  @db.VarChar(20) // Employee's phone number
  loginId    Int      // Foreign key to Login
  login      Login    @relation(fields: [loginId], references: [id])
   @@unique([name, phoneNumber])
}

model Login {
  id               Int               @id @default(autoincrement())
  email            String            @db.VarChar(255)
  username         String            @unique @db.VarChar(255) // Ensure usernames are unique
  password         String            @db.VarChar(255) // Store hashed password
  address         String?            // Added address field
  gstNumber       String?            // Added GST number field
  orders           Order[]
  kotOrders        KOTOrder[]
  userOrderCounter UserOrderCounter?
  employees        Employee[]         // One-to-many relation with employees
  iceCreams        IceCream[]         // Each login has its own list of ice creams
  addons           Addon[]            // Each login has its own list of addons
  coupons         Coupon[]
}

model UserOrderCounter {
  id          Int       @id @default(autoincrement())
  counter     Int // Tracks the user-specific order ID
  KOTCounter  Int
  lastUpdated DateTime? // Automatically updated when created
  loginId     Int       @unique // Ensures each user has only one counter
  login       Login     @relation(fields: [loginId], references: [id])
}

model KOTOrder {
  id              Int            @id @default(autoincrement())
  kotNumber       Int
  kotName         String        @db.VarChar(255)
  cartItems       Json          
  total           Float         @default(0.0)
  lastUpdatedDate DateTime      @updatedAt
  loginId         Int
  login           Login         @relation(fields: [loginId], references: [id])
}

model Addon {
  id              Int              @id @default(autoincrement())
  name            String
  price           Float
  category        AddonCategory
  loginId         Int              // Ensure each login has its own addons
  login           Login            @relation(fields: [loginId], references: [id])
  orderItemAddons OrderItemAddon[]
    @@unique([name, price, category, loginId])
}

model OrderItemAddon {
  id          Int       @id @default(autoincrement())
  quantity    Int
  priceAtTime Float    // Add this field to store historical price
  orderId     Int
  orderItem   OrderItems @relation(fields: [orderId], references: [id])
  addonId     Int
  addon       Addon     @relation(fields: [addonId], references: [id])

  @@unique([orderId, addonId])
}


