// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model IceCream {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  category   Category     @default(IceCream)
  cost       Float
  // Relation field
  orderItems OrderItems[]
}

enum Category {
  IceCream
  Falooda
  MilkShakes
  Topping
  Cone
}

enum ModeOfPayment {
  Cash
  Card
  UPI
}

enum OrderType {
  DineIn
  TakeAway
  Delivery
}

enum OrderStatus {
  SUCCESS
  CANCELLED
}

model Order {
  id            Int           @id @default(autoincrement())
  userOrderId   Int
  orderDate     DateTime      @default(now())
  modeOfPayment ModeOfPayment
  orderType     OrderType
  totalCost     Float         @default(0.0)
  userId        Int
  status        OrderStatus   @default(SUCCESS)
  // Relation field
  user          Login         @relation(fields: [userId], references: [id])
  orderItems    OrderItems[]
}

model OrderItems {
  id          Int   @id @default(autoincrement())
  quantity    Int   @default(1)
  itemCost    Float // Stores the price of one unit of the ice cream

  addons      Json  @default("{}")
  // Foreign keys
  orderId     Int
  iceCreamId  Int

  // Relations
  order    Order    @relation(fields: [orderId], references: [id])
  iceCream IceCream @relation(fields: [iceCreamId], references: [id])

  @@unique([orderId, iceCreamId]) // Ensures each ice cream is only listed once per order
}

model Login {
  id               Int               @id @default(autoincrement())
  email            String            @db.VarChar(255)
  username         String            @unique @db.VarChar(255) // Ensure usernames are unique
  password         String            @db.VarChar(255) // Store hashed password
  orders           Order[]
  kotOrders        KOTOrder[]
  userOrderCounter UserOrderCounter?
}

model UserOrderCounter {
  id          Int       @id @default(autoincrement())
  counter     Int // Tracks the user-specific order ID
  KOTCounter  Int
  lastUpdated DateTime? // Automatically updated when created
  loginId     Int       @unique // Ensures each user has only one counter
  login       Login     @relation(fields: [loginId], references: [id])
}

model KOTOrder {
  id              Int      @id @default(autoincrement())
  kotNumber       Int // Stores the current counter value for the KOT order
  kotName         String   @db.VarChar(255)
  cartItems       Json // Stores a list of lists of cart items
  total           Float    @default(0.0)
  lastUpdatedDate DateTime @updatedAt // Automatically updates on each modification
  loginId         Int // Foreign key to reference the Login model
  login           Login    @relation(fields: [loginId], references: [id]) // Defines the relation to Login
}
